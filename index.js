import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import express from 'express';
import mime from 'mime-types';

// 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
dotenv.config();

// 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
  console.error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env');
  process.exit(1);
}

// 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
const isRailway = process.env.RAILWAY_ENVIRONMENT === 'production';

// 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(token, {
  polling: false // –í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ–º polling –¥–ª—è Railway
});

console.log(`üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ ${isRailway ? 'production (Railway)' : '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'}`);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const PDF_BASE_PATH = './pdfs/';
const ADMIN_ID = process.env.ADMIN_ID || '199775458';
const STATS_FILE = path.join(process.cwd(), 'bot_stats.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function initStats() {
  if (!fs.existsSync(STATS_FILE)) {
    const defaultData = {
      totalUsers: 0,
      activeUsers: [],
      arcanaRequests: {},
      arcanaSent: {},
      linkClicks: { ZAZINA_TATYANA: 0, Zazina_TD: 0 },
      commandUsage: {}
    };
    fs.writeFileSync(STATS_FILE, JSON.stringify(defaultData, null, 2)); // –î–æ–±–∞–≤—å—Ç–µ null, 2 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    console.log('–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'); // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats(type, data) {
  initStats();
  const stats = JSON.parse(fs.readFileSync(STATS_FILE));

  switch(type) {
    case 'new_user':
      stats.totalUsers += 1;
      stats.activeUsers.push({
        id: data.chatId,
        username: data.username,
        firstInteraction: new Date().toISOString()
      });
      break;

    case 'arcana':
      stats.arcanaRequests[data.arcanumNumber] = (stats.arcanaRequests[data.arcanumNumber] || 0) + 1;
      break;

    case 'arcana_sent':
      if (!stats.arcanaSent[data.arcanumNumber]) {
        stats.arcanaSent[data.arcanumNumber] = {
          count: 0,
          users: []
        };
      }
      stats.arcanaSent[data.arcanumNumber].count += 1;
      stats.arcanaSent[data.arcanumNumber].users.push({
        id: data.chatId,
        date: new Date().toISOString()
      });
      break;

    case 'link_click':
      stats.linkClicks[data.linkName] = (stats.linkClicks[data.linkName] || 0) + 1;
      break;

    case 'command':
      stats.commandUsage[data.command] = (stats.commandUsage[data.command] || 0) + 1;
      break;
  }

  fs.writeFileSync(STATS_FILE, JSON.stringify(stats, null, 2));
      console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ updateStats:', err);
    }
  }

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserState = {
    START: 'START',
    WAITING_FOR_GENDER: 'WAITING_FOR_GENDER',
    WAITING_FOR_NAME: 'WAITING_FOR_NAME',
    CONFIRM_NAME: 'CONFIRM_NAME',
    WAITING_FOR_BIRTHDATE: 'WAITING_FOR_BIRTHDATE',
    CONFIRM_BIRTHDATE: 'CONFIRM_BIRTHDATE',
    WAITING_FOR_MORE: 'WAITING_FOR_MORE'
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
const app = express();
const PORT = process.env.PORT || 3000;
app.use(express.json());

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
app.post('/webhook', (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook (—Ç–æ–ª—å–∫–æ –¥–ª—è Railway)
if (process.env.RAILWAY_ENVIRONMENT === 'production') {
  const domain = process.env.RAILWAY_STATIC_URL;

  if (!domain) {
    console.error('‚ùå RAILWAY_STATIC_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
    process.exit(1);
  }

  const webhookUrl = `${domain}/webhook`;

  bot.setWebHook(webhookUrl)
    .then(() => console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${webhookUrl}`))
    .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', err));
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
const userStates = new Map();
const userData = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text || '';
    const state = userStates.get(chatId) || UserState.START;

    try {
        if (text === '/start') {
            updateStats('new_user', {
                chatId,
                username: msg.from.username || 'unknown'
            });
            updateStats('command', { command: '/start' });
            return handleStart(chatId);
        }

        switch(state) {
            case UserState.WAITING_FOR_GENDER:
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ callback, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                break;

            case UserState.WAITING_FOR_NAME:
                return handleNameInput(chatId, text);

            case UserState.WAITING_FOR_BIRTHDATE:
                return handleBirthdateInput(chatId, text);

            default:
                // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
                if (!text.startsWith('/')) {
                    bot.sendMessage(chatId, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
                }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
});

bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const state = userStates.get(chatId) || UserState.START;

  try {
    switch(state) {
      case UserState.WAITING_FOR_GENDER:
        return handleGenderSelection(chatId, data);
      case UserState.CONFIRM_NAME:
        return handleNameConfirmation(chatId, data);
      case UserState.CONFIRM_BIRTHDATE:
        return handleBirthdateConfirmation(chatId, data);
      case UserState.WAITING_FOR_MORE:
        return handleMoreInfoRequest(chatId, data);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
        if (data === 'link_zazina') {
          updateStats('link_click', { linkName: 'ZAZINA_TATYANA' });
        } else if (data === 'link_channel') {
          updateStats('link_click', { linkName: 'Zazina_TD' });
        }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

function handleGenderSelection(chatId, gender) {
    storeUserData(chatId, 'gender', gender);
    userStates.set(chatId, UserState.WAITING_FOR_NAME);
    bot.sendMessage(chatId, '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?');
}

function handleNameInput(chatId, name) {
    if (isValidName(name)) {
        storeUserData(chatId, 'name', name);
        userStates.set(chatId, UserState.CONFIRM_NAME);

        const keyboard = {
            inline_keyboard: [
                [
                    { text: '–î–∞', callback_data: 'confirm_yes' },
                    { text: '–ù–µ—Ç', callback_data: 'confirm_no' }
                ]
            ]
        };

        bot.sendMessage(chatId, `–¢–≤–æ–µ –∏–º—è: ${name}?`, {
            reply_markup: keyboard
        });
    } else {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2-50 —Å–∏–º–≤–æ–ª–æ–≤).');
    }
}

function handleNameConfirmation(chatId, confirmation) {
    if (confirmation === 'confirm_yes') {
        const gender = getUserData(chatId, 'gender');
        userStates.set(chatId, UserState.WAITING_FOR_BIRTHDATE);
        bot.sendMessage(chatId,
            gender === 'gender_male'
                ? '–û—Ç–ª–∏—á–Ω–æ! –ö–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª—Å—è? (–î–î.–ú–ú.–ì–ì–ì–ì)'
                : '–û—Ç–ª–∏—á–Ω–æ! –ö–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª–∞—Å—å? (–î–î.–ú–ú.–ì–ì–ì–ì)');
    } else {
        userStates.set(chatId, UserState.WAITING_FOR_NAME);
        bot.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?');
    }
}

function handleBirthdateInput(chatId, birthDate) {
    if (birthDate.match(/^\d{2}\.\d{2}\.\d{4}$/)) {
        storeUserData(chatId, 'birthdate', birthDate);
        userStates.set(chatId, UserState.CONFIRM_BIRTHDATE);

        const gender = getUserData(chatId, 'gender');
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '–î–∞', callback_data: 'confirm_yes' },
                    { text: '–ù–µ—Ç', callback_data: 'confirm_no' }
                ]
            ]
        };

        bot.sendMessage(chatId,
            gender === 'gender_male'
                ? `–¢—ã —Ä–æ–¥–∏–ª—Å—è ${birthDate}?`
                : `–¢—ã —Ä–æ–¥–∏–ª–∞—Å—å ${birthDate}?`, {
            reply_markup: keyboard
        });
    } else {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.');
    }
}

function handleBirthdateConfirmation(chatId, confirmation) {
    if (confirmation === 'confirm_yes') {
        const birthDate = getUserData(chatId, 'birthdate');

        // 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        sendArcanumDocument(chatId, birthDate, () => {
            // 2. –≠—Ç–æ –∫–æ–ª–±—ç–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '–î–∞', callback_data: 'confirm_yes' },
                        { text: '–ù–µ—Ç', callback_data: 'confirm_no' }
                    ]
                ]
            };

            // 3. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            bot.sendMessage(chatId, '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–≤–æ–µ–º –∞—Ä–∫–∞–Ω–µ?', {
                reply_markup: keyboard
            });

            userStates.set(chatId, UserState.WAITING_FOR_MORE);
        });

    } else {
        userStates.set(chatId, UserState.WAITING_FOR_BIRTHDATE);
        bot.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
    }
}
function handleMoreInfoRequest(chatId, confirmation) {
    if (confirmation === 'confirm_yes') {
        const message = `üåü –û—Ç–∫—Ä–æ–π –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ —Å –º–æ–∏–º–∏ —Ä–∞–∑–±–æ—Ä–∞–º–∏!

üìÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥
–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –¥–µ—Ä–∂–∏—à—å –≤ —Ä—É–∫–∞—Ö –∫–∞—Ä—Ç—É —Å–æ–∫—Ä–æ–≤–∏—â, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü —Ç–≤–æ–µ–≥–æ –≥–æ–¥–∞ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–∏ —Ç–∞–π–Ω—ã. –≠—Ç–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑ ‚Äî —Ç–≤–æ–π –∫–æ–º–ø–∞—Å –≤ –æ–∫–µ–∞–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.

‚ú® –ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:
- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
- –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å—Ñ–µ—Ä–∞–º: –¥–µ–Ω—å–≥–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

üåô –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü
–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫ –¥–µ–π—Å—Ç–≤–∏—é.

üìÜ –£–∑–Ω–∞–π —ç–Ω–µ—Ä–≥–∏—é –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è, —á—Ç–æ–±—ã:
- –í—ã–±–∏—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
- –ù–∞—á–∏–Ω–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–∏–ª—ã –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç

üó∫ –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞
–ü—Ä–µ–¥—Å—Ç–∞–≤—å –ø–∞–Ω–æ—Ä–∞–º—É —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –∫–∞–∫ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥—É—à–∏.

‚ú® –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:
- –î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ —Å–∫–∞—á–∫–∞ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ñ–µ—Ä–∞—Ö
- –ß—ë—Ç–∫–∏–π –ø–ª–∞–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥, 5 –ª–µ—Ç, 10 –ª–µ—Ç –∏ –¥–∞–ª—å—à–µ

üåå –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–≤–µ–∑–¥—ã
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏, –≤–∫–ª—é—á–∞—è –≥–ª—É–±–∏–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥—É—à–∏ –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏.

‚ú® –£–∑–Ω–∞–π:
- –°–≤–æ—ë –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
- –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞
- –ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª

üë∂ –†–∞–∑–±–æ—Ä –¥–µ—Ç—Å–∫–æ–π –º–∞—Ç—Ä–∏—Ü—ã
–í–æ–ª—à–µ–±–Ω—ã–π –∫–ª—é—á –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∏—Ä–∞ —Ç–≤–æ–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞.

‚ú® –°–æ–∑–¥–∞–π —Å—Ä–µ–¥—É, –≥–¥–µ:
- –¢–∞–ª–∞–Ω—Ç—ã –º–∞–ª—ã—à–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∞—é—Ç
- –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã

üèõ –†–æ–¥–æ–≤–æ–π –∫–≤–∞–¥—Ä–∞—Ç
–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–æ–¥–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.

‚ú® –û—Å–æ–∑–Ω–∞–π:
- –ö–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—ã –Ω–µ—Å—ë—à—å –≤ —Å–µ–±–µ
- –ö–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å

üîë –ö–æ–¥ —É—Å–ø–µ—Ö–∞
–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–ª—é—á –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π.

‚ú® –ê–∫—Ç–∏–≤–∏—Ä—É–π:
- –°–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Å–∫—Ä—ã—Ç—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã
- –ü—É—Ç—å –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∫ —É—Å–ø–µ—Ö—É

üíº –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
–†–∞—Å–∫—Ä–æ–π –∑–∞–∫–æ–Ω—ã —Å–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞.

‚ú® –£–∑–Ω–∞–π:
- –í –∫–∞–∫–∏—Ö —Å—Ñ–µ—Ä–∞—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—ã –º–æ–∂–µ—à—å —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
- –ö–∞–∫ –¥–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É—Å–ø–µ—Ö–∞ –∏ –≥–ª—É–±–æ–∫–æ–≥–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è –æ—Ç —Ä–∞–±–æ—Ç—ã

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª–∏—á–Ω–æ https://t.me/ZAZINA\\_TATYANA

–ó–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–æ–π –∫–∞–Ω–∞–ª üíõ - https://t.me/Zazina\\_TD`;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } else {
        bot.sendMessage(chatId,
            '–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –ø–∏—à–∏ –∑–∞ —Ä–∞–∑–±–æ—Ä–æ–º –º–Ω–µ –ª–∏—á–Ω–æ - https://t.me/ZAZINA_TATYANA \n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üòä');
    }
}
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function handleStart(chatId) {
    // –ï—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–Ω–æ–≤–∞
    if (userStates.get(chatId) && userStates.get(chatId) !== UserState.START) {
        return;
    }

    userStates.set(chatId, UserState.WAITING_FOR_GENDER);

    const keyboard = {
        inline_keyboard: [
            [
                { text: '–ú—É–∂—á–∏–Ω–∞', callback_data: 'gender_male' },
                { text: '–î–µ–≤—É—à–∫–∞', callback_data: 'gender_female' }
            ]
        ]
    };

    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –¢—ã –¥–µ–≤—É—à–∫–∞ –∏–ª–∏ –º—É–∂—á–∏–Ω–∞?', {
        reply_markup: keyboard
    });
}

async function updateUserStats(chatId, user) {
    updateStats('new_user', {
        chatId,
        username: user.username || 'unknown'
    });
    updateStats('command', { command: '/start' });
}

async function sendArcanumDocument(chatId, birthDate, callback) {
    try {
        const day = parseInt(birthDate.split('.')[0]);
        const arcanumNumber = calculateArcanumNumber(day);
        const gender = getUserData(chatId, 'gender');
        const pdfPath = findArcanumPdf(arcanumNumber, gender);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updateStats('arcana', { arcanumNumber });
            updateStats('arcana_sent', { arcanumNumber, chatId });

            if (fs.existsSync(pdfPath)) {
              await bot.sendDocument(chatId, pdfPath, {
                caption: `–í–∞—à –∞—Ä–∫–∞–Ω –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: ${arcanumNumber}`,
                contentType: mime.lookup(pdfPath) || 'application/pdf', // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
                filename: `arcanum_${arcanumNumber}.pdf`
              });
            } else {
              await bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∞—Ä–∫–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
            callback();
          } catch (error) {
            console.error(error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –¥–∞—Ç—ã.');
            callback();
          }
        }

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.onText(/\/stats/, (msg) => {
  if (msg.chat.id.toString() !== ADMIN_ID) {
    return bot.sendMessage(msg.chat.id, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
  }

  try {
    const stats = JSON.parse(fs.readFileSync(STATS_FILE));
    let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}
üîÆ –ó–∞–ø—Ä–æ—Å–æ–≤ –∞—Ä–∫–∞–Ω–æ–≤: ${Object.values(stats.arcanaRequests).reduce((a, b) => a + b, 0)}
üîó –ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—Å—ã–ª–∫–∞–º:
   ‚Ä¢ ZAZINA_TATYANA: ${stats.linkClicks.ZAZINA_TATYANA}
   ‚Ä¢ Zazina_TD: ${stats.linkClicks.Zazina_TD}
üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: ${JSON.stringify(stats.commandUsage)}`;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –∞—Ä–∫–∞–Ω–∞–º
    message += `\n\nüì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—Ä–∫–∞–Ω–æ–≤:`;
    Object.entries(stats.arcanaSent || {}).forEach(([arcanum, data]) => {
      message += `\n‚Ä¢ –ê—Ä–∫–∞–Ω ${arcanum}: ${data.count} —Ä–∞–∑ (${data.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`;
    });

    bot.sendMessage(msg.chat.id, message);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    bot.sendMessage(msg.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
  }
});

function calculateArcanumNumber(day) {
    if (day <= 22) return day;

    let sum = day.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);
    while (sum > 22) {
        sum = sum.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);
    }
    return sum;
}

function findArcanumPdf(arcanumNumber, gender) {
    const genderPrefix = gender === 'gender_male' ? 'm_' : 'f_';
    let pdfPath = `${PDF_BASE_PATH}${genderPrefix}arcanum_${arcanumNumber}.pdf`;

    if (fs.existsSync(pdfPath)) return pdfPath;

    pdfPath = `${PDF_BASE_PATH}arcanum_${arcanumNumber}.pdf`;
    if (fs.existsSync(pdfPath)) return pdfPath;

    return `${PDF_BASE_PATH}default.pdf`;
}

function storeUserData(chatId, key, value) {
    if (!userData.has(chatId)) {
        userData.set(chatId, {});
    }
    userData.get(chatId)[key] = value;
}

function getUserData(chatId, key) {
    return userData.get(chatId)?.[key];
}

function isValidName(name) {
    return /^[A-Za-z–ê-–Ø–∞-—è—ë–Å]{2,50}$/.test(name);
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if (isRailway) {
  console.log('ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook –Ω–∞ Railway');
} else {
  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∏—Ç—å polling
  console.log('üîß –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
  bot.startPolling({
    restart: true,
    polling: {
      interval: 300,
      autoStart: true,
      params: {
        timeout: 10
      }
    }
  });

  bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
  });
}